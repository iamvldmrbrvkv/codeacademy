simple example of breadcrumbs
.breadcrumb > li {
  display: inline;
}

.breadcrumb li+li::before {
	padding: 10px;
  content: ">";
}

.breadcrumb a {
  text-decoration: none;
}

.breadcrumb a:hover {
  color: red;
}
Another common feature of breadcrumbs is that they are separated by a symbol, often > or /.
Instead of having to manually add this to all of the breadcrumbs in our breadcrumb trail, we can use a CSS pseudo-element.
This requires some complicated CSS, but it will save us time in the long run!
.breadcrumb li+li::before is the selector that we want! View the hint if you want more information about how this complicated selector works!

The + is called the adjacent sibling combinator; it will only select two li‘s when they are immediately next to each other, with the same parent. 
The element that actually gets selected is the second element of this sibling pair.
The ::before part of this selector creates a pseudo-element. 
The ::before pseudo-element is often used with the content property, to add content that will be displayed just before the selected element.
.breadcrumb li+li::before {
  content: "/";
}
The code above adds a “/“ symbol inbetween all adjacent breadcrumbs.

breadcrumb styles
The example below makes use of a couple of CSS tricks to create an arrow effect. 
We’re using the ::before and ::after pseudo-elements to add filled rectangles (with empty content) before and after each list item:

.breadcrumb li a::before, .breadcrumb li a::after {
  content: "";
  position: absolute;
  border-color: darkcyan;
  border-style: solid;
  border-width: 15px 5px;
}
By setting a portion of the border to transparent, it creates the “tail” of the arrow:

.breadcrumb li a::before {
  left: -10px;
  border-left-color: transparent;
}
This effect works because the element borders are drawn from the center of the element. 
We use similar CSS to draw the head of the arrow.
breadcrumb {
  text-align: left;
}
.breadcrumb li {
  float: left;
}

.breadcrumb a {
  color: #fff;
  background: darkcyan;
  text-decoration: none;
  position: relative;
  height: 30px;
  line-height: 30px;
  text-align: center;
  margin-right: 15px;
  padding: 0 5px;
}

.breadcrumb a::before,
.breadcrumb a::after {
  content: "";
  position: absolute;
  border-color: darkcyan;
  border-style: solid;
  border-width: 15px 5px;
}

.breadcrumb a::before {
  left: -10px;
  border-left-color: transparent;
}
.breadcrumb a::after {
  left: 100%;
}

.breadcrumb a::after {
  left: 100%;
  border-color: transparent;
  border-left-color: darkcyan;
}

.breadcrumb a:hover {
  background-color: blue;
}
.breadcrumb a:hover::before {
  border-color: blue;
  border-left-color: transparent;
}
.breadcrumb a:hover::after {
  border-left-color: blue;
}

breadcrumb types
There are three major types of breadcrumbs:

Location
Attribute
Path
You’ve seen the first two types in our examples so far.

Location based breadcrumbs are based on where you are with respect to the navigation structure of the website. 
In our previous shoe shopping example, the first three li elements are location based. We are in the “shoes” section of the website, which is contained within the “fashion” section, which is contained within the “shopping” section.

Attribute based breadcrumbs are based on the attributes of the page or product that you are browsing. 
In our previous example, the final two li elements are attribute based. We are shopping for shoes that are “flats” and “brown”. 
Since the order of these attributes is not prescriptive, you’ll see some sites display these at the same level in the UI. 
If you want to allow users to remove attributes, provide an (x) button or similar to indicate they can be removed.

Finally, breadcrumbs can be based on a user’s unique path through the site. 
For example, if they landed on the home page, browsed to the about page and finally the registration page, their breadcrumb trail may look like:

Home > About > Register

Note that this breadcrumb trail will be different for each user and each visit. 
For even mildly complex sites, the number of steps will become large. 
To simplify the display, the beginning of the trail is often abbreviated:

... > About > Register

.breadcrumb {
  text-align: left;
}
.breadcrumb li {
  display: inline;
  color: gray;
}
.breadcrumb > li.location+li.location::before {
  color: gray;
  content: ">";
}
.breadcrumb a {
  display: inline;
}

.attribute a {
  color: gray;
}

.attribute a::after {
  content: " x";
  font-size: 8px;
  vertical-align: super;
}

breadcrumb pitfalls
Sometimes it is not appropriate to use breadcrumbs as a means of secondary navigation within a website. 
Users expect breadcrumbs to behave a certain way and attempts to deviate from this may confuse them. 
Most users are expecting breadcrumbs to expose the hierarchy of the site or display attributes of the page they are on.

Path based breadcrumbs are unique to a user’s journey and are not commonly implemented. 
Only use this type of breadcrumbs if there is a compelling reason for it.

While breadcrumbs are common, it is not the primary way users will navigate a site. 
Don’t make the breadcrumbs the only navigation structure.

In general, the rule of not adding anything extraneous to the design applies here. 
If the site only contains a few pages or if the pages in the breadcrumbs are already available through primary navigation, there is little reason to include breadcrumbs in the design.

summary
